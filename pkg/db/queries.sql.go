// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const createActiveSkill = `-- name: CreateActiveSkill :one
INSERT INTO active_skills (
  display_name,
  description,
  types,
  embedding
) VALUES (
  $1::text,
  $2::text,
  $3,
  $4::vector(3072)
)
RETURNING
  id
`

type CreateActiveSkillParams struct {
	DisplayName string
	Description string
	Types       []string
	Embedding   pgvector.Vector
}

func (q *Queries) CreateActiveSkill(ctx context.Context, arg CreateActiveSkillParams) (int64, error) {
	row := q.db.QueryRow(ctx, createActiveSkill,
		arg.DisplayName,
		arg.Description,
		arg.Types,
		arg.Embedding,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getMostSimilarActiveSkill = `-- name: GetMostSimilarActiveSkill :one
SELECT
  id,
  display_name,
  description,
  types
FROM active_skills
ORDER BY embedding <-> $1::vector(3072)
LIMIT 1
`

type GetMostSimilarActiveSkillRow struct {
	ID          int64
	DisplayName pgtype.Text
	Description pgtype.Text
	Types       []string
}

func (q *Queries) GetMostSimilarActiveSkill(ctx context.Context, queryEmbedding pgvector.Vector) (GetMostSimilarActiveSkillRow, error) {
	row := q.db.QueryRow(ctx, getMostSimilarActiveSkill, queryEmbedding)
	var i GetMostSimilarActiveSkillRow
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Description,
		&i.Types,
	)
	return i, err
}
