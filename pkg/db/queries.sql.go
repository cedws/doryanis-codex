// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const createActiveSkill = `-- name: CreateActiveSkill :one
INSERT INTO active_skills (
    display_name,
    description,
    types,
    embedding_id
) VALUES (
    $1::text,
    $2::text,
    $3,
    $4::bigint
)
RETURNING
    id
`

type CreateActiveSkillParams struct {
	DisplayName string
	Description string
	Types       []string
	EmbeddingID int64
}

func (q *Queries) CreateActiveSkill(ctx context.Context, arg CreateActiveSkillParams) (int64, error) {
	row := q.db.QueryRow(ctx, createActiveSkill,
		arg.DisplayName,
		arg.Description,
		arg.Types,
		arg.EmbeddingID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createEmbedding = `-- name: CreateEmbedding :one
INSERT INTO embeddings (
    embedding
) VALUES (
    $1::vector(3072)
)
RETURNING
    id
`

func (q *Queries) CreateEmbedding(ctx context.Context, embedding pgvector.Vector) (int64, error) {
	row := q.db.QueryRow(ctx, createEmbedding, embedding)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getMostSimilarActiveSkills = `-- name: GetMostSimilarActiveSkills :many
SELECT
    a.id,
    a.display_name,
    a.description,
    a.types
FROM active_skills AS a
INNER JOIN embeddings AS e ON a.embedding_id = e.id
WHERE a.embedding_id IS NOT NULL
ORDER BY e.embedding <-> $1::vector(3072)
LIMIT $2::int
`

type GetMostSimilarActiveSkillsParams struct {
	QueryEmbedding pgvector.Vector
	N              int32
}

type GetMostSimilarActiveSkillsRow struct {
	ID          int64
	DisplayName pgtype.Text
	Description pgtype.Text
	Types       []string
}

func (q *Queries) GetMostSimilarActiveSkills(ctx context.Context, arg GetMostSimilarActiveSkillsParams) ([]GetMostSimilarActiveSkillsRow, error) {
	rows, err := q.db.Query(ctx, getMostSimilarActiveSkills, arg.QueryEmbedding, arg.N)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMostSimilarActiveSkillsRow
	for rows.Next() {
		var i GetMostSimilarActiveSkillsRow
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.Description,
			&i.Types,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
